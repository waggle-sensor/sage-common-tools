#!/usr/bin/env python3
import argparse
from pathlib import Path
import time

CLK = 241
DATA_EP = 242
DATA_PH = 243

INPUT = "in"
OUTPUT = "out"

LOW = "0"
HIGH = "1"

def ensure_gpio_exported(num: int):
    if not Path(f"/sys/class/gpio/gpio{num}").exists():
        Path("/sys/class/gpio/export").write_text(str(num))

def set_gpio_direction(num: int, dir: str):
    Path(f"/sys/class/gpio/gpio{num}/direction").write_text(dir)

def set_gpio_value(num: int, value: str):
    Path(f"/sys/class/gpio/gpio{num}/value").write_text(value)

def main():
    choices = ["on", "off"]
    parser = argparse.ArgumentParser()
    parser.add_argument("ep-state", choices=choices, help="edge processor power state")
    parser.add_argument("ph-state", choices=choices, help="peripherals power state")
    args = parser.parse_args()

    # ensure gpios are setup
    ensure_gpio_exported(CLK)
    ensure_gpio_exported(DATA_EP)
    ensure_gpio_exported(DATA_PH)
    time.sleep(0.01)
    set_gpio_direction(CLK, OUTPUT)
    set_gpio_direction(DATA_EP, OUTPUT)
    set_gpio_direction(DATA_PH, OUTPUT)
    time.sleep(0.01)

    # set desired states then clock the latch
    set_gpio_value(DATA_EP, HIGH if args.ep_state == "on" else LOW)
    set_gpio_value(DATA_PH, HIGH if args.ph_state == "on" else LOW)
    time.sleep(0.01)
    set_gpio_value(CLK, LOW)
    time.sleep(0.01)
    set_gpio_value(CLK, HIGH)
    time.sleep(0.01)

if __name__ == "__main__":
    main()
